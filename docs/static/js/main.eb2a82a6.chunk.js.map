{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAgB7C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAOP,GAAP,mBAAqBO,OACvCN,EAAc,OAMd,2BACAO,KAAK,OACLC,MAAOT,EACPU,SAjBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAiBnBG,YAAY,qB,uBC1BXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDdyBK,CAAa1B,GAAjCa,EAFuB,EAE5BN,KAAca,EAFc,EAEdA,QAErB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,2CAEZ,yBAAKJ,UAAU,aAEPH,EAAOJ,KAAK,SAACkB,GAAD,OACR,kBAAC,EAAD,eACIC,IAAKD,EAAMhB,IACPgB,UEdjB,SAASE,IAAgB,IAAD,EAEC5C,mBAAS,CAAC,oBAFX,mBAE5B6C,EAF4B,KAEhB9C,EAFgB,KAKnC,OACI,oCACI,6CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACA,4BAEQ8C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAUA,SCftC+B,IAASC,OACL,kBAACH,EAAD,MACFI,SAASC,eAAe,U","file":"static/js/main.eb2a82a6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ( {setCategories}) => {\n\n    const [inputvalue, setInputvalue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputvalue(e.target.value)\n    }\n\n    const handleSubmit = (e) => { \n        e.preventDefault();\n        if ( inputvalue.trim().length > 2){\n            setCategories(cats =>  [ inputvalue,...cats ] );\n            setInputvalue('');\n        }\n    } \n\n    return (\n        <form onSubmit={handleSubmit}> \n            <input \n            type=\"text\" \n            value={inputvalue}\n            onChange={ handleInputChange}\n            placeholder=\"Write anything\"\n            />\n\n        </form>\n    );\n\n}\n\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Kc9u10z8LTX9bD0MK0wO92YoJOagYWzA`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n \n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    \n    //console.log({id, title, url});\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n            <img src={url} alt={title} ></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'; \n\nexport const GifGrid = ({category}) => {\n \n    const {data:images , loading} = useFetchGifs(category); \n\n    return (\n        <>\n            <h3>{category}</h3> \n            {loading && <h2>Loading ...</h2>}\n\n            <div className=\"card-grid\">\n                { \n                    images.map( (image ) => (\n                        <GifGridItem \n                            key={image.id}\n                            {...image}\n                        />\n                    )) \n                } \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n            .then(imgs => { \n                setstate({\n                    data: imgs,\n                    loading: false\n                }); \n            });\n    }, [category]);\n\n    return state; \n}\n\n\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport default function GitExpertApp() { \n\n    const [categories, setCategories] = useState(['Stranger Things']);\n \n\n    return (\n        <>\n            <h2> GitExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n\n            <hr/> \n            <ol>\n                { \n                    categories.map(category => (\n                        <GifGrid\n                            key ={category}  \n                            category={category}\n                        />\n                    )) \n                }\n            </ol>\n        </>\n    )\n} \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport GitExpertApp from './GitExpertApp';\n\nReactDOM.render( \n    <GitExpertApp /> ,\n  document.getElementById('root')\n);\n \n"],"sourceRoot":""}